version: '3.8'

services:
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "${REDIS_SERVICE_PORT:-6379}:${REDIS_SERVICE_PORT:-6379}"
    networks:
      - app-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s
    deploy:
      resources:
        limits:
          memory: 800M
          cpus: '0.8'
        reservations:
          memory: 128M
          cpus: '0.2'

  notification-service:
    build:
      context: .
      dockerfile: ./services/notification-service/Dockerfile
    container_name: notification-service
    env_file: .env
    ports:
      - "${NOTIFICATION_SERVICE_PORT}:${NOTIFICATION_SERVICE_PORT}"
    volumes:
      - ./services/notification-service:/usr/src/app
      - ./shared:/usr/src/app/shared
      - /usr/src/app/node_modules
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - app-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:3000/health"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'

  auth-service:
    build:
      context: .
      dockerfile: ./services/auth-service/Dockerfile
    container_name: auth-service
    env_file: .env
    ports:
      - "${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}"
    volumes:
      - ./services/auth-service:/usr/src/app
      - ./shared:/usr/src/app/shared
      - /usr/src/app/node_modules
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - app-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:3001/health"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'

  chat-service:
    build:
      context: .
      dockerfile: ./services/chat-service/Dockerfile
    container_name: chat-service
    env_file: .env
    ports:
      - "${CHAT_SERVICE_PORT}:${CHAT_SERVICE_PORT}"
    volumes:
      - ./services/chat-service:/usr/src/app
      - ./shared:/usr/src/app/shared
      - /usr/src/app/node_modules
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - app-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:3002/health"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'

  hal9000-service:
    build:
      context: .
      dockerfile: ./services/HAL9000/Dockerfile
    container_name: HAL9000
    env_file: .env
    ports:
      - "${BOT_PORT}:${BOT_PORT}"
    volumes:
      - ./services/HAL9000:/usr/src/app
      - ./shared:/usr/src/app/shared
      - /usr/src/app/node_modules
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - app-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:3003/health"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'

  user-service:
    build:
      context: .
      dockerfile: ./services/user-service/Dockerfile
    container_name: user-service
    env_file: .env
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
    volumes:
      - ./services/user-service:/usr/src/app
      - ./shared:/usr/src/app/shared
      - /usr/src/app/node_modules
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - app-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:3004/health"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'

  post-service:
    build:
      context: .
      dockerfile: ./services/post-service/Dockerfile
    container_name: post-service
    env_file: .env
    ports:
      - "${POST_SERVICE_PORT}:${POST_SERVICE_PORT}"
    volumes:
      - ./services/post-service:/usr/src/app
      - ./shared:/usr/src/app/shared
      - /usr/src/app/node_modules
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - app-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:3005/health"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s
    deploy:
      resources:
        limits:
          memory: 1200M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'

  websocket-service:
    build:
      context: .
      dockerfile: ./services/websocket-service/Dockerfile
    container_name: websocket-service
    env_file: .env
    ports:
      - "${WS_SERVICE_PORT}:${WS_SERVICE_PORT}"
    volumes:
      - ./services/websocket-service:/usr/src/app
      - ./shared:/usr/src/app/shared
      - /usr/src/app/node_modules
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - WS_PORT=${WS_SERVICE_PORT}
    networks:
      - app-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:3006/health"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'

  moderationai-service:
    build:
      context: .
      dockerfile: ./services/moderationAi-service/Dockerfile
    container_name: moderationAi-service
    env_file: .env
    ports:
      - "3008:3008"
    volumes:
      - data_models:/root/.cache/huggingface/transformers
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - app-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:3007/health"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s
    deploy:
      resources:
        reservations:
          memory: 256M
          cpus: '0.5'

  suggest-service:
    build:
      context: .
      dockerfile: ./services/service-suggest/Dockerfile
    container_name: service-suggest
    env_file: .env
    ports:
      - "3009:3009"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - app-network
    volumes:
      - deepface_weights:/root/.deepface/weights
      - data_models:/root/.cache/huggingface/transformers
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:3010/health"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s
    deploy:
      resources:
        reservations:
          memory: 256M
          cpus: '0.5'

  client:
    build:
      context: 
      dockerfile: ./services/client/Dockerfile
    container_name: client
    env_file: .env
    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      redis:
        condition: service_healthy
      notification-service:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      chat-service:
        condition: service_healthy
      hal9000-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      post-service:
        condition: service_healthy
      websocket-service:
        condition: service_healthy
      moderationai-service:
        condition: service_healthy
      suggest-service:
        condition: service_healthy

networks:
  app-network:
    driver: bridge

volumes:
  data_models: {}
  cache_volume: {}
  redis_data: {}
  deepface_weights: {}
